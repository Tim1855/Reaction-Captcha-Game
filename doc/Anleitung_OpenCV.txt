# OpenCV Anleitung

1. Ordner erstellen für OpenCV
2. Sourcecode von OpenCV herunterladen (.zip Datei) [hier](https://github.com/opencv/opencv/releases/tag/4.10.0)
3. zip entpacken
4. build ordner anlegen (außerhalb des entpackten opencv ordners)
5. cmake gui öffnen (geht bestimmt auch in der cmd, ich habs aber so gemacht)
6. die sources in cmake auf den entpackten ordner setzen (falls ein Fehler auftritt, kann es sein, dass in dem ausgewählten Ordner noch ein opencv ordner ist, dieser sollte dann einfach ausgewählt werden)
7. "where to build binaries" auf den erstellten "build" Ordner festlegen
8. Configure drücken und Mingw Makefiles auswählen und starten
9. anschließend Generate drücken
10. in den build ordner wechseln und "mingw32-make.exe install" eingeben (ggf. -j8 oder -j16 anhängen, damit mehrere CPU-Kerne benutzt werden (kann laut werden))
11. CMakeLists.txt übernehmen so wie unten
12. im build ordner sollte ein install ordner auftauchen, dieser muss als OpenCV_DIR gesetzt werden. (manuell mit set(...) oder wie unten per Umgebungsvariable, das vereinfacht das zusammenarbeiten)
13. Dann noch ".../build/install/x64/mingw/bin/" zum Pfad hinzufügen und neustarten.

```cmake
cmake_minimum_required(VERSION 3.28)
project([hier name eintragen])

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_DEFAULT 11)
file(GLOB_RECURSE SRC "include/*.h" "include/*.hpp" "src/*.cpp")



#set(OpenCV_DIR [hier geht auch der absolute Pfad zum testen, bevor man die Umgebungsvariable setzt]) # ungefähr so: ".../build/install/"
if (NOT "$ENV{OPEN_CV_PATH}" STREQUAL "")# nach dem Setzen der Umgebungsvariable neustarten
    set(OpenCV_DIR "$ENV{OPEN_CV_PATH}" CACHE INTERNAL "Acquired opencv path from environmental variables")
else ()
    message(FATAL_ERROR "opencv has not been found, this build process requires opencv as an essential library. Please edit this CMakeLists.txt file or add the opencv folder to your environmental variables")
endif ()

find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")

message(STATUS "OpenCV library status:")
message(STATUS "    config: ${OpenCV_DIR}")
message(STATUS "    version: ${OpenCV_VERSION}")
message(STATUS "    libraries: ${OpenCV_LIBS}")
message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")
add_executable(${PROJECT_NAME} ${SRC})

target_link_libraries(${PROJECT_NAME} ${OpenCV_LIBS})
```